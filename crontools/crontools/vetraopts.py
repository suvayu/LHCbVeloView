"""This module provides Vetra options related utilities

Includes:
- templates for datacards, options files, etc
- gaudirun options for different settings

@author Suvayu Ali
@email  Suvayu dot Ali at cern dot ch
@date   [2014-11-17 Mon]

"""

from string import Template
from logging import warning

def get_gaudi_opts(option):
    import os
    opts = []
    if option == 'NZS':
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-NZS_Data-Emul.py']
    elif option == 'ZS':
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-ZS_Data.py']
    elif option == 'NZS+ZS':
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-NZS+ZS_Data-Emul.py']
    elif option == 'TED14':
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-TED_Data-2014-11.py']
    elif option == 'NOISE' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-NoiseNoBeam.py']
    elif option == 'RR' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-RoundRobin.py']
    elif option == 'ADCDELAYSCAN' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-ADCDelayScan.py']
    elif option == 'GAIN' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-GainMon_TestPulse.py']
    elif option == 'TAE' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-ZS_Data.py']
    elif option == 'EXCM' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-ZS_Data.py']
    elif option == 'ERROR' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-ZS_Data.py']
    elif option == 'ALLZS' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-ZS_Data.py']
    elif option == 'DEBUG' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-VeloDebug.py']
    elif option == 'COLLISION' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-2015-Collisions.py']
    elif option == 'BADSTRIPS' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-Default-BADSTRIPS_Data-Emul.py']
    elif option == 'HVOff' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-HVOff-BADSTRIPS_Data-Emul.py']
    elif option == 'HVOn' :
        opts += [os.environ['VETRAROOT'] + '/options/Velo/Vetra-HVOn-BADSTRIPS_Data-Emul.py']
    else:
        warning('Unknown option!')
    return ['gaudirun.py'] + opts

def get_datacard(runinfo, files, maxevts=70000, skip=0):
    tmpl = Template(
"""# Generated by ${caller} on ${hostname} at ${timestamp}

from Gaudi.Configuration import *
from GaudiConf import IOHelper
from Configurables import Vetra

IOHelper().inputFiles(${urls})

Vetra().EvtMax = ${maxevts}
Vetra().SkipEvents = ${skip}
Vetra().HistogramFile = "VELODQM_${run}_${timestamp}_${stream}.root"
""")

    pars = {
        'caller'    : get_username(),
        'hostname'  : get_hostname(),
        'timestamp' : runinfo['timestamp'],
        'urls'      : get_urls(runinfo, files),
        'maxevts'   : maxevts,
        'skip'      : skip,
        'run'       : runinfo['run'],
        'stream'    : runinfo['stream']
    }
    return tmpl.substitute(**pars)

def get_optfile():
    """Get Vetra options file"""
    tmpl = """
from Configurables import Vetra

Vetra().FilterBeamBeam = True

from Configurables import VetraRecoConf
VetraRecoConf().TrackPatRecAlgorithms = [ 'FastVelo' ]

from Configurables import CondDB

CondDB().IgnoreHeartBeat = True
"""
    return tmpl

def get_runinfo(run, year, partition, stream):
    """Create basic run info dictionary for datacard template"""
    if isinstance(run, list):
        run = run[0].split('_', 1)[0]
    return {
        'protocol' : 'root:root',
        'year'     : year,
        'partition': partition,
        'stream'   : stream,
        'run'      : run,
        'timestamp': get_timestamp()
    }

def get_urls(urlinfo, files):
    """Get urls from files"""
    if urlinfo['protocol'] == 'file':
        urlfmt = "DATAFILE='{protocol}:/daqarea/lhcb/data/{year}/RAW/FULL/" \
                 + "{partition}/{stream}/{run}/{file}' SVC='LHCb::MDFSelector'"
    else:
        urlfmt = "DATAFILE='{protocol}://castorlhcb.cern.ch/" \
                 + "/castor/cern.ch/grid/lhcb/data/{year}/RAW/FULL/" \
                 + "{partition}/{stream}/{run}/{file}' SVC='LHCb::MDFSelector'"
    return [urlfmt.format(file = f, **urlinfo) for f in files]

def get_username():
    """Get username"""
    import getpass
    return getpass.getuser()

def get_hostname():
    """Get hostname"""
    import socket
    return socket.gethostname()

def get_timestamp(time_t = None):
    """Get timestamp"""
    import time
    if not time_t: time_t = time.localtime()
    return time.strftime('%Y-%m-%d_%H.%M.%S', time_t)
